'''
Напишите программу, которая принимает на вход список целых чисел и выводит на экран значения, которые повторяются в нём более одного раза.
Для решения задачи может пригодиться метод sort списка.
Формат ввода:
Одна строка с целыми числами, разделёнными пробелом.
Формат вывода:
Строка, содержащая числа, разделённые пробелом. Числа не должны повторяться, порядок вывода может быть произвольным.
Sample Input:
4 8 0 3 4 2 0 3
Sample Output:
0 3 4
'''
s = list(input().split())

s.sort()
m = []
for i in range(1, len(s)):
    if s[i-1] == s[i]:
        if s[i] not in m:
          m.append(s[i])
        
print(" ".join(m))


'''
Вы решили написать преобразователь кода на Python в код на Java. Так как на Java принят стандарт наименования CamelCase, то вы решили научиться преобразовывать имена из underscore в этот формат. 
Для начала напишите программу, которая переводит имена переменных из стиля написания underscore в стиль UpperCamelCase.
Стиль underscore характеризуется тем, что слова в имени пишутся маленькими буквами и разделяются между собой символом подчёркивания "_". Стиль UpperCamelCase означает, что каждое слово пишется с большой буквы и разделителей между словами нет.
Формат ввода:
Одна строка, содержащая имя, записанное в формате underscore.
Формат вывода:
Строка, содержащая пришедшее имя в формате UpperCamelCase.
Sample Input 1:
my_first_class
Sample Output 1:
MyFirstClass
Sample Input 2:
a
Sample Output 2:
A
'''
name_py = input()
name_js = []
name_js.append(name_py[0].upper())
for i in range(1, len(name_py)):
    if name_py[i] == '_':
        pass
    if name_py[i] != '_':
        if name_py[i-1] == '_':
            name_js.append(name_py[i].upper())
        else:
            name_js.append(name_py[i])
print("".join(name_js))


'''
Выведите таблицу размером n×n, заполненную целыми числами от 1 до n2 по спирали, выходящей из левого верхнего угла и закрученной по часовой стрелке, как показано в примере.
Формат ввода:
Одна строка, содержащая одно целое число n, n>0.
Формат вывода:
Таблица из n строк, значения в строках разделены пробелом.
'''
def zm(n):
    # Обычно dx и dy - это некие приращения для переменных x и y
    dx, dy = 1, 0
    # Переменным x и y присваивается значение 0
    x, y = 0, 0
    # Создаётся список списков
    # Это матрица n*n
    # Пока все её элементы - пустые (None)
    arr = [[None] * n for _ in range(n)]
    # Выполняется перебор
    # Для переменной i последовательно перебираем значения от 1 до (n-квадрат + 1)
    for i in range(1, n**2+1):
        # Элементу матрицы с координатами x и y присваивается значение i
        # Эта строчка будет присваивать последовательные натуральные числа
        # тем ячейкам, которые перебирает код чуть ниже
        arr[x][y] = i
        # Создаются временные переменные nx и ny
        # в которых вычисляются новые значения для x и y
        # для этого к старым значенииям прибавляются приращения
        nx, ny = x+dx, y+dy
        # Если всё нормально, и индекс не выскочил за пределы матрицы
        # или не наткнулся на уже занятую ячейку
        if 0 <= nx < n and 0 <= ny < n and not arr[nx][ny]:
            # то эти значения и оставляются
            x, y = nx, ny
        else:
            # а если индекс выскочил за границу матрицы
            # или наткнулся на уже занятую ячейку
            # то разворачиваемся на 90 градусов
            # путем замены приращения по x и y друг на друга
            # а минус нужен, чтобы он не ходил только вправо или вниз, 
            # а чередовал с движениями вверх или влево. 
            # Так и получается спираль 
            dx, dy = -dy, dx
            # и используем уже это изменённое движение для новых значений x и y
            x, y = x+dx, y+dy
    # После того, как перебрали все элементы, 
    # печатаем то, что получилось
    for x in list(zip(*arr)):
        print(*x)

zm(int(input()))
